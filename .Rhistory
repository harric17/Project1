cutWage = cut2(training$wage,g=3)
#makes cuts to the data based on quantiles
table(cutWage)
qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot","jitter"))
qplot(age,wage,data=training,color=jobclass)
qplot(CompressiveStrength,FlyAsh,data=training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[trainIndex,]
testing = mixtures[-trainIndex,]
qplot(CompressiveStrength,FlyAsh,data=training)
mixtures
names(mixtures)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[trainIndex,]
testing = mixtures[-trainIndex,]
names(mixtures)
qplot(CompressiveStrength,FlyAsh,data=training)
names(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
names(mixtures)
qplot(CompressiveStrength,FlyAsh,data=training)
names(training)
levels(mixtures$FlyAsh)
mixtures$FlyAsh
cutFly = cut2(mictures$FlyAsh,g=2)
cutFly = cut2(mixtures$FlyAsh,g=2)
qplot(CompressiveStrength,FlyAsh,data=training,color=cutFly)
cutFly
cutFly = cut2(mixtures$FlyAsh,g=3)
table(mixtures$FlyAsh)
)
qplot(CompressiveStrength,FlyAsh,data=training)
qplot(y=CompressiveStrength,x=FlyAsh,data=training)
names(mixtures)
mixtures$ind = 1:length(mixtures)
mixtures$myind = 1:length(mixtures)
length(mixtures)
mixtures$myind = 1:dim(mixtures)[2]
mixtures$myind = 1:dim(mixtures)[1]
qplot(y=CompressiveStrength,x=myind,data=training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
mixtures$myind = 1:dim(mixtures)[1]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
names(mixtures)
qplot(y=CompressiveStrength,x=myind,data=training)
cutFly = cut2(training$FlyAsh,g=3)
qplot(y=CompressiveStrength,x=myind,data=training,color=cutFly)
cutFly = cut2(training$FlyAsh,g=4)
qplot(y=CompressiveStrength,x=myind,data=training,color=cutFly)
cutFly = cut2(training$FlyAsh,g=5)
qplot(y=CompressiveStrength,x=myind,data=training,color=cutFly)
cutFly = cut2(training$FlyAsh,g=10)
qplot(y=CompressiveStrength,x=myind,data=training,color=cutFly)
cutFly = cut2(training$FlyAsh,g=100)
qplot(y=CompressiveStrength,x=myind,data=training,color=cutFly)
cutFly = cut2(training$FlyAsh,g=3)
qplot(y=CompressiveStrength,x=myind,data=training,color=cutFly)
cutFly = cut2(training$FlyAsh,g=2)
qplot(y=CompressiveStrength,x=myind,data=training,color=cutFly)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training)
hist(training$SuperPlasticizer)
training$SuperPlasticizer
names(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training$SuperPlasticizer
head(training$Superplasticizer)
levels(training$Superplasticizer)
table(training$Superplasticizer)
min(training$Superplasticizer)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
abc <- data.frame( x=c(1, 2, NA, NA ), y=c('a', 'B', NA, '*' ) )
## look at it
abc
## add a format specifier (not used by R)
SASformat(abc$x) <- 'date7.'
## add a variable label (not used by R)
label(abc$y) <- 'character variable'
library(SASxport)
install.packages("SASxport")
library(SASxport)
## manually create a data set
abc <- data.frame( x=c(1, 2, NA, NA ), y=c('a', 'B', NA, '*' ) )
## look at it
abc
## add a format specifier (not used by R)
SASformat(abc$x) <- 'date7.'
## add a variable label (not used by R)
label(abc$y) <- 'character variable'
## add a dataset label and type
label(abc) <- 'Simple example'
SAStype(abc) <- 'MYTYPE'
## verify the additions
str(abc)
write.xport( abc, file="xxx.dat" )
getwd()
write.xport( abc, file="xxx.xpt" )
library(SASxport)
getwd()
#Read in data
mydata<- shogun.get('/onco/rituxan/e1496/pmc14/rawdata','kafunc')
trace(write.xport( mydata2, file="mydata.dat" ),tracer=browser)
write.xport( mydata2, file="mydata.dat" )
mydata2 = data.frame(1,1)
mydata2
write.xport( mydata2, file="mydata.dat" )
mydata2 = data.frame(1,1)
write.xport( mydata2, file="mydata.dat" )
library(SASxport)
write.xport( mydata2, file="mydata.dat" )
abc <- data.frame( x=c(1, 2, NA, NA ), y=c('a', 'B', NA, '*' ) )
## look at it
abc
## add a format specifier (not used by R)
SASformat(abc$x) <- 'date7.'
## add a variable label (not used by R)
label(abc$y) <- 'character variable'
## add a dataset label and type
label(abc) <- 'Simple example'
SAStype(abc) <- 'MYTYPE'
## verify the additions
str(abc)
# create a SAS XPORT file
write.xport( abc, file="xxx.dat" )
write.xport( abc, file="xxx.xpt" )
## manually create a data set
abc <- data.frame( x=c(1, 2, NA, NA ), y=c('a', 'B', NA, '*' ) )
## look at it
abc
## add a format specifier (not used by R)
SASformat(abc$x) <- 'date7.'
## add a variable label (not used by R)
label(abc$y) <- 'character variable'
## add a dataset label and type
label(abc) <- 'Simple example'
SAStype(abc) <- 'MYTYPE'
## verify the additions
str(abc)
# create a SAS XPORT file
write.xport( abc, file="xxx.xpt" )
# list the contents of the file
names(mydata)
kafunc<- shogun.get('/onco/rituxan/e1496/pmc14/rawdata','kafunc')
kafunc<- shogun.get('/onco/rituxan/e1496/pmc14/rawdata','kafunc')
kafunc <- shogun.get('/onco/rituxan/e1496/pmc14/rawdata','kafunc')
mydata
mydata<- shogun.get('/onco/rituxan/e1496/pmc14/rawdata','kafunc')
library(SASxport)
mydataabc = data.frame(a=c(1,1,1),b=c(2,2,2))
write.xport(mydataabc, file="xxx.xpt",autogen.formats=T)
library(survival)
library(ISwR)
install.packages("ISwR")
library(ISwR)
str(melanom)
melanom
names(melanom)
head(melanom)
melanom[melanom$status==1]
melanom[melanom$status==1,]
melanom$status==1
melanom[melanom$status==1]
melanom[melanom$status==1,"status"]
melanom[melanom$status==(2,3),"status"]
melanom[melanom$status %in% c(2,3),"status"]
melanom[melanom$status %in% c(2,3),"status"]=0
head(melanom)
Surv(days,status==1)
Surv(days,status==1,data=melanom)
Surv(melanom$days,melanom$status==1)
Surv(melanom$days,melanom$status==1)
Surv(melanom$days,melanom$status==1)
Surv(melanom$days,melanom$status==1)
Surv(melanom$days,melanom$status)
Surv(melanom$days,melanom$status==0)
Surv(melanom$days,melanom$status==0)
Surv(melanom$days,melanom$status)
myfit = survfit(Surv(days,status==1), data=melanom)
myfit = survfit(Surv(melanom$days,melanom$status==1))
library(survival)
survfit(Surv(melanom$days,melanom$status==1))
myfit = survfit(Surv(melanom$days,melanom$status)~1)
myfit
myfit = survfit(Surv(melanom$days,melanom$status==1)~)
myfit = survfit(Surv(melanom$days,melanom$status==1)~1)
myfit = survfit(Surv(melanom$days,melanom$status==1)~1)
myfit
myfit
summary(myfit)
head(summary(myfit))
summary(myfit)
plot(myfit)
head(melanom)
myfit = survfit(Surv(melanom$days,melanom$status==1)~melanom$sex)
myfit2
myfit2 = survfit(Surv(melanom$days,melanom$status==1)~melanom$sex)
myfit2
summary(myfit2)
plot(myfit2)
plot(myfit2,conf.int=TRUE, col=c("red","blue"), lty=1:2,legend.text=c(("Female","Male")))
plot(myfit2,conf.int=TRUE, col=c("red","blue"), lty=1:2,legend.text=c("Female","Male"))
plot(myfit2,conf.int=TRUE, col=c("red","blue"), lty=1:2)
plot(myfit2,conf.int=TRUE, col=c("red","blue"), lty=1:2)
plot(myfit2,conf.int=TRUE, col=c("red","blue"), lty=1:2,legend.text=c("Female","Male"))
plot(myfit2,conf.int=TRUE, col=c("red","blue"), lty=1:2,legend=c("Female","Male"))
plot(myfit2,conf.int=TRUE, col=c("red","blue"), lty=1:2)
legend.text=c("Female","Male")
plot(myfit2,conf.int=TRUE, col=c("red","blue"), lty=1:2)
legend.text=c("Female","Male")
legend=c(100,.1,"Female","Male")
plot(myfit2,conf.int=TRUE, col=c("red","blue"), lty=1:2)
legend=c(100,.1,"Female","Male")
legend=c(1000,.1,"Female","Male")
legend(1000,.1,c("Female","Male"),lty=1:2)
legend(1000,.1,c("Female","Male"))
legend(500,.2,c("Female","Male"),lty=1:2)
legend(500,.2,c("Female","Male"),lty=1:2,col=c("red","blue"))
plot(myfit2,conf.int=TRUE, col=c("red","blue"), lty=1:2)
legend(500,.2,c("Female","Male"),lty=1:2,col=c("red","blue"))
plot(myfit2)
plot(myfit2,conf.int=TRUE, col=c("red","blue"), lty=1:2)
legend(500,.2,c("Female","Male"),lty=1:2,col=c("red","blue"))
survdiff(myfit2)
myfit2
myfit2 = survfit(Surv(melanom$days,melanom$status==1)~melanom$sex)
survdiff(Surv(melanom$days,melanom$status==1)~melanom$sex)
plot(myfit,conf.int=FALSE)
myfit = survfit(Surv(melanom$days,melanom$status==1)~1)
plot(myfit,conf.int=FALSE)
head(melanom)
head(melanom)
#stratify on sex
myfit2 = survfit(Surv(melanom$days,melanom$status==1)~melanom$sex)
myfit2
summary(myfit2)
#plot
#defaults to display confidence intervals
plot(myfit2)
myfit2 = survfit(Surv(melanom$days,melanom$status==1)~melanom$sex)
myfit2
summary(myfit2)
#plot
#defaults to display confidence intervals
plot(myfit2)
plot(myfit2,conf.int=TRUE, col=c("red","blue"), lty=1:2)
legend(500,.2,c("Female","Male"),lty=1:2,col=c("red","blue"))
#Now find the log-rank test statistic to compare the survival curves
survdiff(Surv(melanom$days,melanom$status==1)~melanom$sex)
myfit3 = coxph(Surv(melanom$days,melanom$status==1)~melanom$sex)
myfit3
summary(myfit3)
mean(1:3)
help lm
help lm()
? lm
library(methods)
getMethods()
getMethod()
? getMethod()
? getS3method()
? showMethod()
? showMethods()
? getS3method()
? getMethod()
? getS3method()
?model.load
?model.require
?model.transform
?model.load()
library(survival)
# Load in some sample data
library(ISwR)
names(melanom)
head(melanom)
cox.zph(myfit3)
myfit3 = coxph(Surv(melanom$days,melanom$status==1)~melanom$sex)
summary(myfit3)
myfit3
myfit3
summary(myfit3)
cox.zph(myfit3)
?cox.zph()
plot(cox.zph(myfit3))
cox.zph(myfit3)
myzph = cox.zph(myfit3)
summary(myzph)
cox.zph(myfit3)
cox.zph(myfit3)
plot(cox.zph(myfit3))
myfit2 = survfit(Surv(melanom$days,melanom$status==1)~melanom$sex)
myfit2
summary(myfit2)
plot(myfit2)
plot(myfit2,conf.int=F, col=c("red","blue"), lty=1:2)
legend(500,.2,c("Female","Male"),lty=1:2,col=c("red","blue"))
getwd()
setwd("C:\Users\harric17\Desktop\R Stuff\coursera\rep_rsrch\Project1"")
setwd("C:/Users/harric17/Desktop/R Stuff/coursera/rep_rsrch/Project1")
activity = read.csv("activity.csv")
names(activity)
head(activity)
dim(activity)
dim(mydata)
hist(mydata$steps)
mydata$steps
hist(mydata$step)
names(mydata)
mydata = read.csv("activity.csv")
names(mydata)
head(mydata)
dim(mydata)
hist(mydata$step)
hist(mydata$steps)
hist(mydata$steps)
tail(mydata)
mydata = mydata[!is.na(mydata$steps),]
head(mydata)
dim(mydata)
mydata = read.csv("activity.csv")
dim(mydata)
mydata = mydata[!is.na(mydata$steps),]
head(mydata)
dim(mydata)
mydata
mydata
head(mydata)
aggdata = aggregate(mydata, by =date, fun = sum, na.rm=T )
aggdata = aggregate(mydata, by=date, FUN=sum, na.rm=T )
aggdata = aggregate(mydata, by=date, FUN=mean, na.rm=T )
aggdata = aggregate(mydata, by=date, FUN=sum, na.rm=T)
aggdata = aggregate(mydata$steps, by=date, FUN=sum, na.rm=T)
aggdata = aggregate(mydata[1:2], by=date, FUN=sum, na.rm=T)
mydata[1:2]
aggdata = aggregate(mydata[1:2], by=list(date), FUN=sum, na.rm=T)
testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99) )
by1 <- c("red", "blue", 1, 2, NA, "big", 1, 2, "red", 1, NA, 12)
by2 <- c("wet", "dry", 99, 95, NA, "damp", 95, 99, "red", 99, NA, NA)
aggregate(x = testDF, by = list(by1, by2), FUN = "mean")
testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99) )
by1 <- c("red", "blue", 1, 2, NA, "big", 1, 2, "red", 1, NA, 12)
by2 <- c("wet", "dry", 99, 95, NA, "damp", 95, 99, "red", 99, NA, NA)
testDF
by1
dta.sum <- aggregate(x = mydata, FUN = sum, by = list(Group.date = mydata$date))
dta.sum <- aggregate(x = mydata[1:2], FUN = sum, by = list(Group.date = mydata$date))
mydata[c("steps")]
dta.sum <- aggregate(x = mydata[c("steps")], FUN = sum,by = list(Group.date = mydata$date))
aggdata <- aggregate(x = mydata[c("steps")], FUN = sum,by = list(Group.date = mydata$date))
aggdata
hist(aggdata$steps)
aggdata <- aggregate(x = mydata[c("steps")], FUN = mean,by = list(Group.date = mydata$date))
aggdata
aggdata <- aggregate(x = mydata[c("steps")], FUN = median,by = list(Group.date = mydata$date))
aggdata
aggdata <- aggregate(x = mydata[c("steps")], FUN = sum,by = list(Group.date = mydata$date))
mean(aggdata$steps)
median(aggdata$steps)
aggdata
hist(aggdata$steps)
mean(aggdata$steps)
median(aggdata$steps)
aggdata
head(mydata)
aggdata <- aggregate(x = mydata[c("steps")], FUN = average,by = list(Group.interval = mydata$interval))
aggdata <- aggregate(x = mydata[c("steps")], FUN = mean,by = list(Group.interval = mydata$interval))
aggdata
plot(aggdata$steps,aggdata$Group.interval )
plot(aggdata$Group.interval,aggdata$steps)
plot(aggdata$Group.interval,aggdata$steps,type="l")
aggdata[aggdata$steps=max(aggdata$steps),]
aggdata[aggdata$steps==max(aggdata$steps),]
aggdata[aggdata$steps==max(aggdata$steps),c(1:2)]
mydata = read.csv("activity.csv",row.names=FALSE)
print(aggdata[aggdata$steps==max(aggdata$steps),c(1:2)],row.names=FALSE)
hist(aggdata$steps,main="xxx")
aggdata <- aggregate(x = mydata[c("steps")], FUN = sum,by = list(Group.date = mydata$date),na.rm=TRUE)
aggdata <- aggregate(x = mydata[c("steps")], FUN = mean,by = list(Group.interval = mydata$interval),na.rm=TRUE)
is.na(mydata$steps)
sum(is.na(mydata$steps))
mydata = read.csv("activity.csv")
aggdata <- aggregate(x = mydata[c("steps")], FUN = sum,by = list(Group.date = mydata$date),na.rm=TRUE)
aggdata <- aggregate(x = mydata[c("steps")], FUN = mean,by = list(Group.interval = mydata$interval),na.rm=TRUE)
sum(is.na(mydata$steps))
aggdata <- aggregate(x = mydata[c("steps")], FUN = median ,by = list(Group.date = mydata$date),na.rm=TRUE)
aggdata
aggdata <- aggregate(x = mydata[c("steps")], FUN = mean ,by = list(Group.date = mydata$date),na.rm=TRUE)
aggdata
aggdata <- aggregate(x = mydata[c("steps")], FUN = sum ,by = list(Group.date = mydata$date),na.rm=TRUE)
aggdata
head(mydata)
tail(mydata)
tail(mydata)
mydata[mydata$date=="2012-11-30",]
mean(mydata$steps)
mean(mydata$steps,rm.na=T)
mean(mydata$steps,na.rm=T)
mydata[is.na(mydata$steps)]
mydata[is.na(mydata$steps),]
mydata[is.na(mydata$steps),"steps"]
mydata[is.na(mydata$steps),"steps"]=mean(mydata$steps,na.rm=T)
mydata
b = mean(mydata$steps,na.rm=T)
mydata[is.na(mydata$steps),"steps"]=b
mydata
mydata["steps"]
mydata = read.csv("activity.csv")
mydata["steps"]
b = mean(mydata$steps,na.rm=T)
mydata["steps"][is.na(mydata$steps)]=b
mydata[,"steps"][is.na(mydata$steps)]=b
mydata
mydata[,"steps"]
tail(mydata)
sum(is.na(mydata$steps))
aggdata <- aggregate(x = mydata[c("steps")], FUN = sum,by = list(Group.date = mydata$date),na.rm=TRUE)
hist(aggdata$steps,main="Total Steps Per Day")
mean(aggdata$steps)
median(aggdata$steps)
weekday(2014-10-22)
weekdays(2014-10-22)
weekdays("2014-10-22"")
weekdays("2014-10-22")
weekdays("2014-10-22")
weekdays(as.date("2014-10-22"))
as.date("2014-10-22")
class(mydata$date)
weekdays(mydata$date)
weekdays(as.Date(mydata$date))
mydata$day=weekdays(as.Date(mydata$date))
mydata$day
mydata$weekday[mydata$day %in% c("Saturday","Sunday")] = "Weekend"
mydata$weekday
mydata$weekday[!(mydata$day %in% c("Saturday","Sunday"))] = "Weekday"
table(mydata$weekday)
table(mydata$weekday,mydata$day)
library(lattice)
aggdata <- aggregate(x = mydata[c("steps")], FUN = sum,by = list(Group.date = mydata$interval),na.rm=TRUE)
aggdata <- aggregate(x = mydata[c("steps")], FUN = sum,by = list(Group.interval = mydata$interval),na.rm=TRUE)
xyplot(steps~Group.interval|weekday)
aggdata
aggdata <- aggregate(x = mydata[c("steps","weekday")], FUN = sum,by = list(Group.interval = mydata$interval),na.rm=TRUE)
aggdata <- aggregate(x = mydata[c("steps")], FUN = sum,by = list(Group.interval = list(mydata$interval,mydata$weekday),na.rm=TRUE)
library(lattice)
aggdata <- aggregate(x = mydata[c("steps")], FUN = sum,by = list(Group.interval = mydata$interval, weekday=mydata$weekday),na.rm=TRUE)
aggdata
aggdata <- aggregate(x = mydata[c("steps")], FUN = sum,by = list(Group.interval = mydata$interval),na.rm=TRUE)
aggdata <- aggregate(x = mydata[c("steps")], FUN = sum,by = list(Group.interval = mydata$interval, weekday=mydata$weekday),na.rm=TRUE)
xyplot(steps~Group.interval|weekday)
xyplot(steps~Group.interval|weekday, data=mydata)
xyplot(steps~Group.interval|weekday, data=aggdata)
xyplot(steps~Group.interval|weekday, data=aggdata, type=l)
xyplot(steps~Group.interval|weekday, data=aggdata, type="l"")
xyplot(steps~Group.interval|weekday, data=aggdata, type="l")
xyplot(steps~Group.interval|weekday, data=aggdata, type="l")
mydata = read.csv("activity.csv")
mydata$day=weekdays(as.Date(mydata$date))
mydata$weekday[mydata$day %in% c("Saturday","Sunday")] = "Weekend"
mydata$weekday[!(mydata$day %in% c("Saturday","Sunday"))] = "Weekday"
table(mydata$weekday,mydata$day)
aggdata <- aggregate(x = mydata[c("steps")], FUN = sum,by = list(Group.interval = mydata$interval, weekday=mydata$weekday),na.rm=TRUE)
library(lattice)
xyplot(steps~Group.interval|weekday, data=aggdata, type="l")
table(mydata$date)
unique(mydata$date)
count(unique(mydata$date))
as.data.frame(table(mydata$date))
z = rowsum(as.data.frame(table(mydata$date)))
z = sumrow(as.data.frame(table(mydata$date)))
z = rowSums(as.data.frame(table(mydata$date)))
z = rowSums(as.data.frame(table(mydata$date)),dims=1)
z = rowSums(x=as.data.frame(table(mydata$date)),dims=1)
